name: Auto-convert Jenkins â†’ ADO YAML + Open PRs

on:
  workflow_dispatch:
    inputs:
      repos_file:
        description: "Path to a newline-separated file of repo paths or Git URLs"
        required: false
        default: "migrate-repo-list.txt"
      targets_file:
        description: "CSV mapping overrides (optional). If omitted, auto-resolve ADO targets."
        required: false
        default: "ado-targets.csv"
      ado_org:
        description: "Default ADO org (for auto resolution)"
        required: true
        default: "https://dev.azure.com/VI20040428"
      ado_project:
        description: "Default ADO project (for auto resolution & repo creation)"
        required: true
        default: "PartsUnlimitedTest"
      autodiscover_projects:
        description: "Scan all projects in org to find matching repo (true/false)"
        default: "false"
        required: false
      create_if_missing:
        description: "Create ADO repo if not found (true/false)"
        default: "true"
        required: false
      python_version:
        description: "Python version"
        required: false
        default: "3.11"

permissions:
  contents: read

concurrency:
  group: auto-convert-jenkins-to-ado
  cancel-in-progress: false

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.collect.outputs.repos }}
    steps:
      - uses: actions/checkout@v4

      - id: collect
        shell: bash
        run: |
          set -euo pipefail
          FILE="${{ github.event.inputs.repos_file }}"
          [[ -f "$FILE" ]] || { echo "Repos file not found: $FILE"; exit 1; }
          python - <<'PY'
import json, pathlib
p = pathlib.Path("${{ github.event.inputs.repos_file }}")
items = []
for line in p.read_text(encoding="utf-8", errors="ignore").splitlines():
    s = line.strip()
    if not s or s.startswith("#"):
        continue
    items.append(s)
print(f"repos={json.dumps(items)}")
PY
          echo "repos=$(python - <<'PY'
import json, pathlib
p = pathlib.Path("${{ github.event.inputs.repos_file }}")
items = []
for line in p.read_text(encoding="utf-8", errors="ignore").splitlines():
    s = line.strip()
    if not s or s.startswith("#"):
        continue
    items.append(s)
print(json.dumps(items))
PY)" >> "$GITHUB_OUTPUT"

  convert:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        repo: ${{ fromJSON(needs.prepare-matrix.outputs.repos) }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version }}
          cache: pip

      - name: Create output folder
        id: pathing
        shell: bash
        run: |
          set -euo pipefail
          RAW="${{ matrix.repo }}"
          SLUG="$(echo "$RAW" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9._-' '-' | sed 's/^-*//;s/-*$//')"
          OUTDIR="out/${SLUG}"
          mkdir -p "$OUTDIR"
          echo "slug=$SLUG" >> "$GITHUB_OUTPUT"
          echo "outdir=$OUTDIR" >> "$GITHUB_OUTPUT"

      - name: Run auto-converter
        shell: bash
        run: |
          set -euo pipefail
          python tools/auto_convert_repo_to_ado_yaml.py \
            --repo "${{ matrix.repo }}" \
            --out-dir "${{ steps.pathing.outputs.outdir }}" \
          | tee "${{ steps.pathing.outputs.outdir }}/summary.json"

      - uses: actions/upload-artifact@v4
        with:
          name: ado-yaml-${{ steps.pathing.outputs.slug }}
          path: |
            ${{ steps.pathing.outputs.outdir }}/azure-pipelines.yml
            ${{ steps.pathing.outputs.outdir }}/summary.json
          if-no-files-found: error
          retention-days: 14

  open-prs:
    needs: convert
    runs-on: ubuntu-latest
    env:
      ADO_PAT: ${{ secrets.ADO_PAT }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python_version }}
          cache: pip

      - uses: actions/download-artifact@v4
        with:
          pattern: ado-yaml-*
          merge-multiple: true
          path: pr_inputs

      - name: Open PRs in Azure DevOps
        shell: bash
        run: |
          set -euo pipefail
          test -n "${ADO_PAT:-}" || { echo "Missing ADO_PAT"; exit 1; }
          python tools/ado_open_pr.py \
            --in-root pr_inputs \
            --ado-org "${{ github.event.inputs.ado_org }}" \
            --ado-project "${{ github.event.inputs.ado_project }}" \
            --targets "${{ github.event.inputs.targets_file }}" \
            --autodiscover-projects "${{ github.event.inputs.autodiscover_projects }}" \
            --create-if-missing "${{ github.event.inputs.create_if_missing }}"
